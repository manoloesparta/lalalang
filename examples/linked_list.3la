# Pair structure 

let pair = fun(first, second) {
    let dispatcher = fun(index) {
        if(index == 0) {
            return first;
        } 
        if(index == 1) {
            return second;
        }
    }
    return dispatcher;
}

let first = fun(somePair) {
    return somePair(0);
}

let second = fun(somePair) {
    return somePair(1);
}

let randomList = pair(1, pair(2, pair(3, pair(4, pair(5, null)))));

# Pair methods

let generateList = fun(x, cond) {
    if(x == 0) {
        return null;
    }
    if(cond(x)) {
        return pair(x, generateList(x - 1, cond));
    }
    return generateList(x - 1, cond);
}

let forEach = fun(proc, items) {
    if(!items) {
        return null;
    }

    let current = first(items);
    let next = second(items);

    proc(current);
    forEach(proc,next);
}

let map = fun(proc, items) {
    if(!items) {
        return null;
    }

    let current = first(items);
    let next = second(items);
    
    return pair(
        proc(current), 
        map(proc, next)
    );
}

# Pair example

let square = fun(x) {
    return x * x;
}

let printInline = fun(x) {
    print(toString(x) + " ")
}

let even = fun(x) {
    return x % 2 == 0;
}

let list = generateList(10, even);
let squareList = map(square, list);
forEach(printInline, squareList);